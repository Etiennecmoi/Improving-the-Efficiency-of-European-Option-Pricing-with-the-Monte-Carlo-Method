Option Base 1

Function CallPut_MC_Antithetic(Spot As Double, Strike As Double, Volatility As Double, Rate As Double, _
                               Dividend As Double, Expiry As Double, nbSimulMC As Long, Optional isPut As Boolean = False) As Double()

    Dim tStart As Double, tEnd As Double ' Timer variables
    Dim mult As Double, SpotFwdMC As Double, SpotFwdMC_Antithetic As Double
    Dim iSimul As Long, simulMC() As Double
    Dim priceMC As Double, varMC As Double, sdMC As Double
    Dim z As Double, IC_min As Double, IC_max As Double
    Dim resTab(8) As Double ' Ajouter un élément pour stocker le temps d'exécution
    Dim CallBS As Double
    Dim diffclo As Double
    Dim IC As Double

    ' Début du timer
    tStart = Timer

    ' Récupération de la valeur Black-Scholes dans Excel
    CallBS = ThisWorkbook.Worksheets("CallPut").Cells(9, 5).Value

    ' Définir mult en fonction de l'option (call/put)
    mult = 1
    If isPut = True Then
        mult = -1
        CallBS = ThisWorkbook.Worksheets("CallPut").Cells(10, 5).Value
    End If

    ' Allocation mémoire pour les simulations
    ReDim simulMC(1 To nbSimulMC)

    ' Simulation Monte-Carlo avec variante antithétique
    For iSimul = 1 To nbSimulMC Step 2
        ' Génération de Z et -Z
        z = Application.WorksheetFunction.Norm_S_Inv(VBA.Rnd())
        
        ' Simulation classique
        SpotFwdMC = Spot * VBA.Exp((Rate - Dividend - 0.5 * Volatility * Volatility) * Expiry + _
                                   Volatility * VBA.Sqr(Expiry) * z)
        simulMC(iSimul) = Application.WorksheetFunction.Max(mult * (SpotFwdMC - Strike), 0)
        
        ' Simulation antithétique
        SpotFwdMC_Antithetic = Spot * VBA.Exp((Rate - Dividend - 0.5 * Volatility * Volatility) * Expiry + _
                                              Volatility * VBA.Sqr(Expiry) * -z)
        If iSimul + 1 <= nbSimulMC Then
            simulMC(iSimul + 1) = Application.WorksheetFunction.Max(mult * (SpotFwdMC_Antithetic - Strike), 0)
        End If
    Next iSimul

    ' Calcul du prix et de la variance
    priceMC = VBA.Exp(-Rate * Expiry) * Application.WorksheetFunction.Average(simulMC)
    varMC = VBA.Exp(-2 * Rate * Expiry) * Application.WorksheetFunction.Var(simulMC)
    sdMC = VBA.Sqr(varMC)

    ' Calcul de l'intervalle de confiance (95% par défaut, z = 1.96)
    z = 1.96
    IC_min = priceMC - z * sdMC / VBA.Sqr(nbSimulMC)
    IC_max = priceMC + z * sdMC / VBA.Sqr(nbSimulMC)
    diffclo = CallBS - priceMC
    IC = IC_max - IC_min

    ' Fin du timer
    tEnd = Timer

    ' Résultats
    resTab(1) = priceMC          ' Prix Monte-Carlo
    resTab(2) = varMC            ' Variance Monte-Carlo
    resTab(3) = diffclo          ' Différence avec Black-Scholes
    resTab(4) = 1                ' Niveau de confiance (fixé à 95%)
    resTab(5) = IC_min           ' Intervalle de confiance (min)
    resTab(6) = IC_max           ' Intervalle de confiance (max)
    resTab(7) = IC               ' Largeur de l'intervalle de confiance
    resTab(8) = tEnd - tStart    ' Temps d'exécution

    

    CallPut_MC_Antithetic = resTab
End Function


